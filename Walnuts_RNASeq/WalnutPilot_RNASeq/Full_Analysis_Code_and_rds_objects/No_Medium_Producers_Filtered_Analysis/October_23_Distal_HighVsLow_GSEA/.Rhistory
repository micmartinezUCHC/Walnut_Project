analysis_name <- "CPE_control_aug8-10"
######### DON'T CHANGE ANYTHING BELOW #########
#Load libraries
library(dplyr)
library(tidyverse)
#Write a regular expression to pull timestamp data from column 2 of calls DF
calls$timestamps <- gsub(".*_(\\d+)\\.wav", "\\1", calls$Filename)
calls <- calls[,c(1,115,2:114)]
#Make a named list of timestamps, named by filename
files <- calls$Filename
names(files) <- calls$timestamps
#Get all the unique timestamps present in the file
uniqueTimes <- unique(calls$timestamps)
#Initialize a counter and empty list to store results
counter = 0
info <- list()
#Iterate through the different unique timestamps
for (time in uniqueTimes) {
#For each unique timestamp, iterate through every row of the dataframe
for (i in 1:nrow(calls)) {
#Check if the current row is the current unique timestamp
if (calls[i,2] == time) {
#Increment the counter and append number to list
counter <- counter + 1
info[[time]] <- counter
} else {
#Re-initialize counter and continue to next unique timestamp
counter <- 0
next
}
}
}
# Create a dataframe from the 'info' list
info_df <- data.frame(
timestamp = names(info),
count = unlist(info),
stringsAsFactors = FALSE
)
#Write the results to a csv file
write.csv(info_df, file = paste(analysis_name, "calls_per_hour.csv", sep = "_"))
calls <- read.csv("/Volumes/NO NAME/Bat_Sampling_txt/AllSonoBatOptions/CPE_25_aug8-10-Attributed_Parameters_v4.4.5.txt", header = TRUE, sep = "\t")
View(calls)
numCalls <- unique(calls$Filename)
length(numCalls)
calls$timestamps <- gsub(".*_(\\d+)\\.wav", "\\1", calls$Filename)
length(unique(calls$timestamps))
unique(calls$timestamps)
unique(calls$Filename)
uniqueFileTimes <- gsub(".*_(\\d+)\\.wav", "\\1", uniqueFiles)
uniqueFiles <- unique(calls$Filename)
uniqueFileTimes <- gsub(".*_(\\d+)\\.wav", "\\1", uniqueFiles)
uniqueFileTimes
length(uniqueFileTimes)
length(uniqueFiles)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("imcRtools")
library(imcRtools)
help("imcRtools")
??imcRtools
?read_cpout
steinbock <- file.path("/Users/mikemartinez/Desktop/Steinbock_data/")
spe <- read_steinbock(steinbock,
intensities_folder = "intensities",
regionprops_folder = "regionprops",
graphs_folder = "neighbors",
pattern = NULL,
extract_cellid_from = "Object",
extract_coords_from = c("centroid-1", "centroid-0"),
image_file = "images.csv",
extract_imagemetadata_from = c("width_px", "height_px"),
panel_file = "panel.csv",
extract_names_from = "name",
return_as = c("spe", "sce"),
BPPARAM = SerialParam())
spe <- read_steinbock(steinbock,
intensities_folder = "intensities",
regionprops_folder = "regionprops",
graphs_folder = "neighbors",
pattern = NULL,
extract_cellid_from = "Object",
extract_coords_from = c("centroid-1", "centroid-0"),
image_file = "images.csv",
extract_imagemetadata_from = c("width_px", "height_px"),
panel_file = "panel.csv",
extract_names_from = "name",
return_as = c("spe", "sce"),
)
spe <- read_steinbock("/Users/mikemartinez/Desktop/Steinbock_data/",
intensities_folder = "intensities",
regionprops_folder = "regionprops",
graphs_folder = "neighbors",
pattern = NULL,
extract_cellid_from = "Object",
extract_coords_from = c("centroid-1", "centroid-0"),
image_file = "images.csv",
extract_imagemetadata_from = c("width_px", "height_px"),
panel_file = "panel.csv",
extract_names_from = "name",
return_as = c("spe", "sce"),
)
spe <- read_steinbock("/Users/mikemartinez/Desktop/Steinbock_data/",
intensities_folder = "intensities",
regionprops_folder = "regionprops",
graphs_folder = "neighbors",
pattern = "*.csv",
extract_cellid_from = "Object",
extract_coords_from = c("centroid-1", "centroid-0"),
image_file = "images.csv",
extract_imagemetadata_from = c("width_px", "height_px"),
panel_file = "panel.csv",
extract_names_from = "name",
return_as = "sce")
steinbock <- file.path("/Users/mikemartinez/Desktop/Steinbock_data/")
spe <- read_steinbock(steinbock,
intensities_folder = "intensities",
regionprops_folder = "regionprops",
graphs_folder = "neighbors",
pattern = "*.csv",
extract_cellid_from = "Object",
extract_coords_from = c("centroid-1", "centroid-0"),
image_file = "images.csv",
extract_imagemetadata_from = c("width_px", "height_px"),
panel_file = "panel.csv",
extract_names_from = "name",
return_as = "sce")
path <- system.file("/Users/mikemartinez/Desktop/Steinbock_data/")
x <- read_steinbock(path)
path <- system.file("/Users/mikemartinez/Desktop/Steinbock_data/")
path
path <- file.path("/Users/mikemartinez/Desktop/Steinbock_data/")
path
x <- read_steinbock(path)
?system.file
?file.path
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cytoviewer")
library(cytoviewer)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cytoviewer")
library(cytoviewer)
library(imcRtools)
steinbock.output.dir <- "/Users/mikemartinez/Desktop/Steinbock"
spe <- read_steinbock(path = steinbock_output_dir)
spe <- read_steinbock(path = steinbock.output.dir)
spe <- read_steinbock(path = sprintf("%s", steinbock.output.dir))
path <- system.file("extdata/mockData/steinbock", package = "imcRtools")
# Read in as SpatialExperiment object
x <- read_steinbock(path)
path <- system.file("extdata/mockData/steinbock", package = "imcRtools")
x <- read_steinbock(path)
library(vroom)
steinbock.output.dir <- "/Users/mikemartinez/Desktop/Steinbock"
spe <- read_steinbock(path = sprintf("%s", steinbock.output.dir))
tryCatch({
spe <- vroom(steinbock.output.dir, delim = ",", col_names = TRUE)
}, error = function(e) {
cat("Error message:", e$message, "\n")
cat("Stack trace:", traceback(), "\n")
})
spe <- read_steinbock(path = steinbock.output.dir)
steinbock.output.dir <- "/Users/mikemartinez/Desktop/Steinbock/"
spe <- read_steinbock(path = steinbock.output.dir)
?vroom
?read_steinbock
path <- system.file("extdata/mockData/cpout", package = "imcRtools")
show_cpout_features(path)
library(imcRtools)
steinbock.output.dir <- "/Users/mikemartinez/Desktop/Steinbock/"
spe <- read_steinbock(path = steinbock.output.dir)
images <- loadImages("img")
View(spe)
??imcRtolls
??imcRtools
sce <- read_steinbock(path = steinbock.output.dir)
spe <- read_steinbock(path = steinbock.output.dir, return_as = "spe")
sce <- read_steinbock(path = steinbock.output.dir, return_as = "sce")
library(cytomapper)
sce <- buildSpatialGraph(sce, type = "expansion")
?buildSpatialGraph
sce <- buildSpatialGraph(sce, img_id = "Object", type = "expansion")
str(sce)
sce <- buildSpatialGraph(sce, img_id = ObjectNumber, type = "expansion")
sce <- buildSpatialGraph(sce, img_id = "ObjectNumber", type = "expansion")
sce <- buildSpatialGraph(sce, img_id = "ObjectNumber", type = "expansion", threshold = 20)
rownames(spe)
View(sce)
?read_steinbock
spe <- read_steinbock(path = steinbock.output.dir,
intensities_folder = "intensities",
regionprops_folder = "regionprops",
graphs_folder = "neighbors",
pattern = NULL,
extract_cellid_from = "Object",
extract_coords_from = c("centroid-1", "centroid-0"),
image_file = "images.csv",
extract_imagemetadata_from = c("width_px", "height_px"),
panel_file = "panel.csv",
extract_names_from = "name",
return_as = "spe")
rownames(spe)
spe
test <- spe[[imgData()]]
test <- spe@NAMES
test
test <- spe[[imgData]]
test <- spe[[imgData(spe)]]
spe@assays
spe@assays$counts
spe@assays[[counts]]
assays(spe)
imgData(spe)
library(cytomapper)
images <- loadImages(steinbock.output.dir))
images <- loadImages(steinbock.output.dir)
images <- loadImages(sprintf("%s/img", steinbock.output.dir))
masks <- loadImages(sprintf("%s/masks_deepcell", steinbock_output_dir), as.is = TRUE)
masks <- loadImages(sprintf("%s/masks_deepcell", steinbock.output.dir), as.is = TRUE)
masks <- loadImages(sprintf("%s/masks", steinbock.output.dir), as.is = TRUE)
one <- images$`Rosenberg_01012023_1-1_001`
channelNames(one) <- rownames(spe)
test <- normalize(one, separateImages = TRUE)
View(images)
View(masks)
masks
mcols(images)
names(images)
images@listData$`Rosenberg_01012023_1-1_001`
unique_ROIs <- unique(images@listData)
unique_ROIs
unique_Masks <- unique(masks@listData)
unique_Maska
unique_Masks
View(masks)
?channelNames
channelNames(images)
rownames(spe)
channelNames(images) <- rownames(spe)
images
mcols(images) <- mcols(masks) <- DataFrame(sample_id = names(images))
test <- mcols(images) #<- mcols(masks) <- DataFrame(sample_id = names(images))
test <- mcols(images) <- mcols(masks) <- DataFrame(sample_id = names(images))
View(test)
test <- as.data.frame(test)
test <- mcols(images) <- mcols(masks) <- DataFrame(sample_id = names(images))
mcols(images)
mcols(masks)
names(images)
ROIs <- mcols(images) <- mcols(masks) <- DataFrame(sample_id = names(images))
mcols(images) <- mcols(masks) <- DataFrame(sample_id = names(images))
images <- normalize(images, separateImages = TRUE)
images <- normalize(images, inputRange = c(0, 0.2))
ecadherin_marker_for_imc_batch <- grep(pattern = 'cadher|epcam', x = rownames(spe), value = T, ignore.case = T)
nuclear_markers <- read.table("/Users/mikemartinez/Desktop/Nuclear_markers_used_for_segmentation_masks.txt", sep = ",")
nuclear_markers <- nuclear_markers$V2
markers_for_cell_type_plus_nuclear_DNA_channels <- c(nuclear_markers, ecadherin_marker_for_imc_batch)
fixed_bcg <- c(0,5,1)
tmp_bcg_list =list()
images
images[1]
color_markers_list = list()
protanopia_deuteranopia_tritanopia_friendly_colors_cytoplasm=c("red")
protanopia_deuteranopia_tritanopia_friendly_colors_nuclear=c("blue") #blue
if (length(markers_for_cell_type_plus_nuclear_DNA_channels) <= 3) {
for (i in 1:length(markers_for_cell_type_plus_nuclear_DNA_channels)) {
if (!grepl(pattern = 'DNA', x = markers_for_cell_type_plus_nuclear_DNA_channels[i])) {
#cytoplasm nu raang
color_markers_list[[markers_for_cell_type_plus_nuclear_DNA_channels[i]]] <- c("black", protanopia_deuteranopia_tritanopia_friendly_colors_cytoplasm)
} else {
#DNA nu raang
color_markers_list[[markers_for_cell_type_plus_nuclear_DNA_channels[i]]] <- c("black", protanopia_deuteranopia_tritanopia_friendly_colors_nuclear)
}
}
}
test <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
colour = color_markers_list,
colored_marker_image_labels = list(position = "topleft",
margin = c(10,10),
font = 1, cex = .7),
bcg = tmp_bcg_list,
legend = list(colour_by.title.cex = 0.7,
colour_by.labels.cex = 0.8,
margin = 0),
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
for (i in 1:length(markers_for_cell_type_plus_nuclear_DNA_channels)) {
tmp_bcg_list[[markers_for_cell_type_plus_nuclear_DNA_channels[i]]] <- fixed_bcg
}
color_markers_list = list()
test <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
colour = color_markers_list,
colored_marker_image_labels = list(position = "topleft",
margin = c(10,10),
font = 1, cex = .7),
bcg = tmp_bcg_list,
legend = list(colour_by.title.cex = 0.7,
colour_by.labels.cex = 0.8,
margin = 0),
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
test <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
#colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
#colour = color_markers_list,
colored_marker_image_labels = list(position = "topleft",
margin = c(10,10),
font = 1, cex = .7),
bcg = tmp_bcg_list,
legend = list(colour_by.title.cex = 0.7,
colour_by.labels.cex = 0.8,
margin = 0),
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
test <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
#colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
#colour = color_markers_list,
#colored_marker_image_labels = list(position = "topleft",
#margin = c(10,10),
#font = 1, cex = .7),
bcg = tmp_bcg_list,
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
?plotPixels
masks[1]
markers_for_cell_type_plus_nuclear_DNA_channels
color_markers_list
color_markers_list[[1]]
color_markers_list = list()
#protanopia, deuteranopia, or tritanopia friendly colors //changed to just regular red, green, blue
#thronaj raang aatyare
protanopia_deuteranopia_tritanopia_friendly_colors_cytoplasm=c("red")
protanopia_deuteranopia_tritanopia_friendly_colors_nuclear=c("blue") #blue
if (length(markers_for_cell_type_plus_nuclear_DNA_channels) <= 3) {
for (i in 1:length(markers_for_cell_type_plus_nuclear_DNA_channels)) {
if (!grepl(pattern = 'DNA', x = markers_for_cell_type_plus_nuclear_DNA_channels[i])) {
#cytoplasm nu raang
color_markers_list[[markers_for_cell_type_plus_nuclear_DNA_channels[i]]] <- c("black", protanopia_deuteranopia_tritanopia_friendly_colors_cytoplasm)
} else {
#DNA nu raang
color_markers_list[[markers_for_cell_type_plus_nuclear_DNA_channels[i]]] <- c("black", protanopia_deuteranopia_tritanopia_friendly_colors_nuclear)
}
}
}
color_markers_list[[1]]
color_markers_list
legend_extraction <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
colour = color_markers_list,
colored_marker_image_labels = list(position = "topleft",
margin = c(10,10),
font = 1, cex = .7),
bcg = tmp_bcg_list,
image_title = list(text = "Test Image",
position = "bottomleft",
colour = '#ffd700',
margin = c(1,1),
font = 1,
cex = .45),
legend = list(colour_by.title.cex = 0.7,
colour_by.labels.cex = 0.8,
margin = 0),
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
bcg
tmp_bcg_list
legend_extraction <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
colour = color_markers_list,
bcg = tmp_bcg_list,
image_title = list(text = "Test Image",
position = "bottomleft",
colour = '#ffd700',
margin = c(1,1),
font = 1,
cex = .45),
legend = list(colour_by.title.cex = 0.7,
colour_by.labels.cex = 0.8,
margin = 0),
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
legend_extraction <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
colour = color_markers_list,
outline_by = colData(spe),
colored_marker_image_labels = list(position = "topleft",
margin = c(10,10),
font = 1, cex = .7),
bcg = tmp_bcg_list,
image_title = list(text = "Test Image",
position = "bottomleft",
colour = '#ffd700',
margin = c(1,1),
font = 1,
cex = .45),
legend = list(colour_by.title.cex = 0.7,
colour_by.labels.cex = 0.8,
margin = 0),
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
colData(spe)
legend_extraction <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
colour = color_markers_list,
outline_by = "ObjectNumber",
colored_marker_image_labels = list(position = "topleft",
margin = c(10,10),
font = 1, cex = .7),
bcg = tmp_bcg_list,
image_title = list(text = "Test Image",
position = "bottomleft",
colour = '#ffd700',
margin = c(1,1),
font = 1,
cex = .45),
legend = list(colour_by.title.cex = 0.7,
colour_by.labels.cex = 0.8,
margin = 0),
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
legend_extraction <-  print(plotPixels(image = images[1],
mask = masks[1],
object = spe,
cell_id = "ObjectNumber", img_id = 'sample_id',
colour_by = markers_for_cell_type_plus_nuclear_DNA_channels,
colour = color_markers_list,
outline_by = "ObjectNumber",
bcg = tmp_bcg_list,
image_title = list(text = "Test Image",
position = "bottomleft",
colour = '#ffd700',
margin = c(1,1),
font = 1,
cex = .45),
legend = list(colour_by.title.cex = 0.7,
colour_by.labels.cex = 0.8,
margin = 0),
missing_colour = "black", margin = 0,
return_plot=TRUE,
display="single"))
suppressPackageStartupMessages(library(org.Hs.eg.db))
suppressPackageStartupMessages(library(AnnotationDbi))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse))
#Differential gene expression
suppressPackageStartupMessages(library(DESeq2))
suppressPackageStartupMessages(library(ashr))
suppressPackageStartupMessages(library(DEGreport))
#Graphics and visualizations
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(ggrepel))
suppressPackageStartupMessages(library(EnhancedVolcano))
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(circlize))
suppressPackageStartupMessages(library(patchwork))
#GSEA analysis
suppressPackageStartupMessages(library(clusterProfiler))
suppressPackageStartupMessages(library(org.Hs.eg.db))
suppressPackageStartupMessages(library(msigdbr))
setwd("/Users/mikemartinez/Desktop/RNA_Sequencing/October_23_Distal_HighVsLow_GSEA/")
gsea <-readRDS("../October_20th_2023_ProxDist_merged/DisatlOnly_NoMedium/Dist_NoMedium_High_vs_Low_GSEA_results.rds")
custom_labels <- labeller(
.default = label_value,
.sign = c(activated = "Activated", suppressed = "Suppressed")
)
dotplot <- dotplot(gsea, x = "GeneRatio", color = "p.adjust",
showCategory = 40,
label_format = 50,
split = ".sign") +
facet_wrap(~ .sign, labeller = custom_labels, scales = "free_y") +
ggtitle("Proximal and Distal High vs Low")
dotplot
gsea@result$Description == "WP_ESTROGEN_METABOLISM"
gsea.read <- as.data.frame(setReadable(gsea, OrgDb = org.Hs.eg.db, keyType = "ENTREZID"))
View(gsea.read)
View(gsea.read)
